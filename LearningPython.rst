===============
Learning Python
===============

-----------------
第一部分 使用入门
-----------------

第一章 问答环节
===============

人们为何使用Python
------------------

* 软件质量

  Python注重可读性、一致性和软件质量，优秀的可重用性和可维护性。  

* 提高开发者效率

  代码数量少，无需编译链接、立即运行

* 程序的可移植性

  程序具有跨平台的特性，可选的独立程序：例如数据库、GUI尽量考虑了可移植性。

* 标准库的支持

  众多功能模块，支持应用级编程任务。丰富的第三方库。

* 组件集成

  轻松的与应用程序的其他部分通信。可以与C、C++、Java相互调用，通过SOAP、XML网络接口交互。

* 享受乐趣

  Python的易用性和强大的内置工具使得编程成为乐趣。  

前两项（质量与效率）是最主要的优点。

Python是脚本语言吗？
--------------------

Python一般可以定义为面向对象的脚本语言。

Python的角色：

* Shell工具

  从命令行运行实现文本处理、程序调用的任务。

* 控制语言

  控制其他程序的“粘结”层

* 使用快捷

  快速编程、使用灵活

Python缺点
----------

速度不如C、C++快，分离需要优化速度的应用，转换为编译好的扩展，使用Python将应用连接起来。

谁在使用Python
--------------

* YouTube分享服务
* BitJorrent软件
* EVE中广泛使用Python
* Maya脚本控制API
* Intel、Cisco、IBM使用Python进行硬件测试
* Pixar制作动画电影
* NASA实现科学计算
* NSA加密和智能分析

Python可以做什么
----------------

* 系统编程 

  操作系统维护的管理工具，标准库对OS工具：环境变量、文件、套接字、管道、进程、线程、正则的支持。

* GUI编程

  内置跨平台TKinter，其他工具包调用QT、GTK、MFC、.NET、Swing、CGI

* Internet

  套接字通信、CGI脚本、FTP、XML、Email、URL、XML-RPC通信、web开发

* 组件集成

  作为粘合语言，与其他语言相互调用

* 数据库编程

  统一接口，pickle对象持久化。

* 快速原型

  Python作为原型，对需要加速的部分用C/C++优化替换。

* 数值计算

* 游戏、图像、人工智能、XML

Python技术优点
--------------

* 面向对象
* 免费
* 可移植性
* 功能强大
  + 动态类型
  + 自动内存管理
  + 大型程序支持
  + 内置对象类型
  + 内置工具
  + 库工具
  + 第三方工具

* 可混合
* 简单易用
* 简单易学

第二章 Python如何运行程序
=========================

Python解释器
------------

解释器读取程序，按照其中的命令执行，得出结果。是代码与机器的计算机硬件之间的软件逻辑层。

程序执行
---------
分为两个角度

* 程序员角度

  运行程序命令行中 python filename  
  
  文件名只有作为模块导入的时候后缀名才必须为``.py`` 

* Python的视角

  1. **字节码编译**

     将源代码编译成字节码形式，字节码是源代码底层的、平台无关的表现形式，运行速度快。  
     如果具有文件写入权限，以``.pyc``为扩展名保存在相同目录下。无法写入时会在内存中生成，程序结束时丢弃。可以用来代替源代码做文件分发。

   2. **Python虚拟机**

      字节码在python虚拟机上运行，“Python解释器的最后一步”。

这样的结构:

* 对性能的含义： 没有编译过程，速度不如C/C++快
* 对开发的含义： 开发和运行环境一致，无需编译。动态语言特性，运行时构建执行另一个python程序成为可能。

执行模块的变体（对字节码、PVM的不同实现）
-----------------------------------------

* CPython 标准
* Jython java
* IronPython .net/c#

执行优化工具（对PVM的优化）
---------------------------

* Psyco实时编译器
* ShedshinC++转换器

冻结二进制文件
--------------
将字节码、PVM以及程序需要的任何支持文件捆绑、打包成一个单独的文件包。

* Windows: py2exe
* Linux: PyInstaller
* freeze


第三章 如何运行程序
===================

交互提示模式下编写代码
----------------------

终端或者IDE中输入::
  python

交互的运行代码
``````````````

| >>>提示符后面输入命令 Enter键立即执行，显示结果。   
| 自动打印表达式无需加print;文件编程需要输出时，必须要用print。
| Linux中Ctrl-D退出，Win中Ctrl-Z退出。

多行语句时，需要两个Enter键，以添加空行后运行程序  多行提示符会变为`...`(可以在sys中定义）  
随便缩进会出错：程序第一个字符为空格时，会有语法错误  
输入命令无法保存，可以写在文件中，然后调用运行。

系统命令行和文件
----------------

交互命令行中，输入的程序执行以后就消失了。交互模式下输入的代码不会保存。
为了永久保存程序，需要在文件中写入代码，这样的文件通常被称为模块。
**模块是一个包含了Python语句的简单文本文件。**
有多种方式运行文件中的语句：通过命令行、点击图标、IDE中选取等。
不论它是如何运行的，每次运行模块文件都会，从头至尾地执行模块文件中的代码。

第一段脚本
``````````

script1.py::

    import sys
    print(sys.platform)
    print(2 ** 100)
    x = 'Spam!'
    print(x * 8）

运行文件
````````
在shell中输入

    python script1.py > saveit.txt

 输出重定向至saveit.txt文件

UNIX可执行文件
``````````````

* 文件第一行固定    

    `#！/usr/bin/env python`

* 文件需要具有可执行权限

windows中运行
`````````````

* 点击图标
* 利用 `input()` 避免结果一闪而过（出错时仍然存在缺陷， `input()` 没有运行便退出了）

模块导入和重载
--------------

任何一个以py结尾的Python源码文件都是一个模块。大程序以多个模块文件的形式出现，其中一个设计成主文件，或叫做顶层文件。

    import model
    
导入文件是另一种运行文件的方式，只是在每次会话的第一次运行，即使导入后模块文件改变，再次导入仍然不会运行。若要再次运行，可以调用imp标准库中可用的reload函数。  

    from imp import reload
    reload (model)

import是语句，无需`()`，reload是函数，需要`()`。

模块的显要特性：属性
````````````````````

属性就是绑定到特定对象上的变量名。包（模块）中的变量名就是属性。导入者得到了模块文件中定义的所有变量名。变量名通常被赋值给模块中的函数、类、变量以及其他被导出的工具。  
**模块被导入时，代码运行生成模块的属性** 。 **`from`导入时，复制了模块的属性** ，以便属性成为接收者的直接变量。  
`dir()` 函数可以获得模块的变量名列表。
内置变量名：  

* \_\_builtins__
* \_\_doc__
* \_\_file__
* \_\_name__
* \_\_package__

模块和命名空间
``````````````

模块式Python程序最大的程序结构。模块文件是一个独立完整的变量包，即一个命名空间。 **`from`导入时，同名的变量会被覆盖，而且不会给出警告。**

import和reload注意事项
``````````````````````

import和reload运行文件，需要记住是否已经import，然后才能reload。 **reload无传递性，重载一个模块，只能重载该模块，该模块导入的模块不会被导入。**

使用exec运行模块文件
--------------------

exec(open('module.py').read())运行文件。 **正在使用的变量有潜在被默认覆盖的可能。**

IDLE用户界面
------------

IDLE可以编辑、运行、浏览和调试Python程序的GUI。由Tkinter开发，跨平台特性。  
GUI程序最好使用其他选项启动。 有些IDLE特性并非Python特性。

其他启动选项
------------

* 命令行
* import
* exec
* IDLE
* 嵌入式调用:C/C++中调用
* 冻结二进制文件
* 文本编辑器启动

-------------------
第二部分 类型和运算
-------------------

第四章 介绍Python对象类型
=========================
为什么使用内置对象
------------------

* 内置对象使程序更容易编写。  
  内置类型往往能够表现问题领域的所有结构，可以马上使用它们，紧靠内置对象类型就能够完成很多工作。
* 内置对象是扩展的组件。  
  定制的对象往往建立在内置类型基础上。
* 内置对象往往比定制的数据结构更有效率。  
  Python优化了实现算法，比定制类型性能高。
* 内置对象是语言的标准的一部分。  
  内置工具是标准的、一致的。
  
Python的核心数据类型
````````````````````
内置对象：

==================  ==============
对象类型            例子 常量/创建
==================  ==============
数字                1234, 3.1415, 3+4j，Decimal，Fraction  
字符串              'spam', "guido's", b'a\xolc'  
列表                [1,[2, 'three'], 4]  
字典                {'food':'spam', 'taste':'yum'}  
元组                (1, 'spam', 4, 'U')  
文件                myfile=open('eggs', 'r')  
集合                set('abc'), {'a', 'b', 'c'}  
其他类型            类型、None、布尔型  
编程单元类型        函数、模块、类型  
与实现相关的类型    编译的代码堆栈跟踪  
==================  ==============

上述列表并不完整，Python程序中处理的每样东西都是一种对象。
例如：模式对象、套接字对象。其他类型的对象往往都是通过导入或者使用模块来建立的。  

**函数、模块和类这样的编程单元在Python中也是对象，它们由def、class、import和lambda这样的语句和表达式创建，并且可以在脚本间自由的传递，存储在其他对象中等。Python中没有类型声明，运行的表达式的语法决定了创建和使用的对象类型。**

一旦创建一个对象，它就和操作绑定了，只可以对字符串进行字符串相关的操作，对列表进行列表相关的操作。 **Python是动态类型的（自动跟踪对象的类型而不是要求声明代码），但是它也是强类型语言（只能对一个对象进行适合该类型的有效操作）。**

功能上，上表中的对象类型可能比你习惯的类型更常用，也更强大。例如： **列表提供了其他对象的有序集合，而字典是通过键存储对象的。列表和字典都可以嵌套，可以随需求扩展和删减，并且能够包含任意类型的对象。**

数字
----

常见数字类型：整数、浮点数、更少见的类型（复数、固定精度的十进制数、带有分子和分母的有理分数、集合等）。

Python基本数字类型支持基本的数学运算。 “+”代表加法，“*”代表乘法，“**”代表乘方。Python3的整数类型会自动提供额外的精度用于大数。

math库里面高级数学工具；random随机数生成器与选择器。

字符串
------

字符串记录文本信息。字符串是单个字符的序列。序列中元素包含了从左到右的顺序--序列中元素根据它们相对位置进行存取。

序列的操作
``````````
len()取长度，以及索引操作（下标从零开始）::

    S='spam'
    len(S)
    S[0]

变量不需要提前声明，赋值时候就创建了它，可能赋任何类型的对象，变量在表达式中会用其值替代它。变量使用前必须对其赋值。

也可以从反向索引（从右边开始），负的索引号会简单地与字符传长度相加，下面两个操作等效::
    S[-1]
    S[len(s)-1]

方括号中也可以使用表达式，而不仅仅是数字常量。 **只要Python需要一个值，我们可以使用一个常量或者变量或者表达式。**

除了简单索引，还可以进行分片::
    S='spam'
    S[1:3]

分片就是从字符串中提取一部分的方法。一般形式为 `X[I:J]` ，表示“取出在X中从偏移量为I，直到但不包括偏移量为J的内容。”
结果为返回一个新的对象。默认的左边界为0，右边界为字符串长度。

字符传支持加号进行合并::
    S + 'xyz'

加号对不同对象有不同的意义。这是多态的特性，这给python带来了很强的灵活性。

不可变性
````````

字符串创建后就不能改变。可以通过建立一个新的字符串并以同一变量名对其赋值来改变。

类型的特定方法
``````````````

字符串的特定操作：

* find
* replace
* split
* upper
* isalpha
* rstrip

这些操作都不会改变原始字符串。

字符串中有一个叫做格式化的高级替代操作，可以以一个表达式的形式和一个字符串方法调用::
    >>> '%s, eggs, and %s' % ('spam', 'SPAM!')
    'spam, eggs, and SPAM!'

    >>> '{0}, eggs, and {1}'.format('spam', 'SPAM!')
    'spam, eggs, and SPAM!'

通用操作多以内置函数或者表达式出现，类型特定操作多以方法调用操作出现。

寻求帮助
````````

内置 `dir()` 函数返回对象所有属性。 `help()` 函数查询作用。

编写字符串的其他方法
````````````````````

反斜线的转义字符::
    >>> S = 'A\nB\tC'
    >>> len(S)
    5

    >>> ord('\n')
    10

    >>> S='A\oB\oC'
    >>> len(S)
    5
三引号包含多行字符串常量::
    >>> msg = """ aaaaaaa
    bbb'''bbbbbbb""bbbb'bbbb
    ccccccccc"""

原生字符串，去掉反斜线转义机制（以"r"开头的字符串）。
Python3中基本str字符创类型也支持处理Unicode；bytes类型表示原始字节字符串，文件返回接受str类型。
Python2中Unicode为单独的类型，str处理8位字符串和二进制数据。

模式匹配
````````

re模块

列表
----

列表是Python最通用的序列。列表是任意类型的对象的位置相关的有序集合。大小可变。

序列操作
````````

与字符串类似。支持索引、切片等。

类型特定的操作
``````````````
没有类型约束，大小可变。

* append
* pop
* insert
* sort
* remove

多数方法直接改变列表对象，而不是创建新列表。

边界检查
````````
超出边界的存取会得到错误。

嵌套
`````
任意组合，多层次的嵌套::
    >>> M = [[1, 2, 3],
             [4, 5, 6],
             [7, 8, 9]]
    >>> M[1]
    [4, 5, 6]
    >>> M[1][2]
    6

列表解析
````````

列表解析通过对序列每项运行一个表达式来创建新列表::
    >>> [row[1] +1 for row in M]
    [3, 6, 9]
    >>> [row[1] for row in M if row[1] % 2 ==0]
    [2, 8]

列表解析可以用来创建生成器::
    >>> G = (sum(row) for row in M)
    >>> next(G)
    6
    >>> next(G)
    15

内置函数可以做类似事情: `list(map(sum， M))` 

python3中解析可以用来创建列表、集合、字典。

字典
----

字典不是序列，是映射。字典是python核心对象集合中唯一的一种映射类型，具有可变性。

映射操作
````````

建立字典::
    >>> D = {'food': 'Spam', 'quantity': 4, 'color': 'pink'}

按键索引::
    >>> D['food']
    'Spam'
    >>> D['quantity'] += 1

空字典，对新键赋值会创建该键::
    >>> D = {}
    >>> D['name'] = 'Bob'
    >>> D['job'] = 'dev'
    >>> D['age'] = 40

重访嵌套
````````

多层嵌套，字典、列表相互包含::
    >>> rec = {'name': {'first': 'Bob', 'last': 'Smith'},
               'jobs': ['dev', 'mgr'],
               'age':  40.5}
    >>> rec['name']                         # 'name' is a nested dictionary
    {'last': 'Smith', 'first': 'Bob'}
    >>> rec['name']['last']                 # Index the nested dictionary
    'Smith'
    >>> rec['jobs']                         # 'jobs' is a nested list
    ['dev', 'mgr']
    >>> rec['jobs'][-1]                     # Index the nested list
    'mgr'
    >>> rec['jobs'].append('janitor')       # Expand Bob's job description in place

    >>> rec
    {'age': 40.5, 'jobs': ['dev', 'mgr', 'janitor'], 'name': {'last': 'Smith',
    'first': 'Bob'}}
在字典中嵌入列表，调用列表的方法。

嵌套允许建立复杂的信息结构。

键的排序：for循环
``````````````````

映射操作仅仅支持通过键获取元素。字典支持类型特定的操作。

需要按键值排序输出时::
    for key in sorted(D):
        print(key, '=>', D[key])

迭代和优化
``````````

通用迭代工具遵循迭代协议，例如：列表解析与for循环。
使用time、timeit和profile模块分析性能进行优化。

不存在的键：if测试
``````````````````

in表达式允许我们查询字典中一个键是否存在。结合if语句做分支判断。
其他办法：get方法、try语句。

元组
----

元组对象基本上就像一个不可改变的列表。

语法上编写在圆括号中，支持任意类型和嵌套以及常见序列操作::
    >>>　T = (1, 2, 3, 4)

专用的调用方法：

* index
* conut

创建之后不可变。

为什么要使用元组
````````````````
关键在于它的不可变性。

文件
----

没有常量语法创建文件。需要调用open函数创建::
    >>> f = open('data.txt', 'w')
    >>> f.write('Hello\n')

文件的内容总是字符串，不管包含的数据是什么类型。
文件对象提供了多种读写方法（read、readline），以及其他工具（seek）。
文件提供了迭代器可以在for循环中一行一行读取。

其他文件类工具
``````````````
管道、FIFO、套接字、对象持久、关系数据库等等。

其他核心类型
------------

集合：调用set函数或者使用{...}来创建。支持集合操作，例如“&” “|” “-”。
Decimals：固定精度浮点数。
布尔值以及None。

破环代码灵活性
``````````````
做类型检查基本都是错误的。
与Python多态的思想相悖，Python中编写对象接口，而不是类型。

用户定义的类
````````````
类定义了新的对象类型，扩展了核心类型。

数字
====

Python的数字类型
----------------

Python中数字是一组类型。不仅支持通常的数字类型（整数和浮点数），
而且能够通过常量创建数字以及处理数字的表达式。
python数字类型包括：

* 整数和浮点数
* 复数
* 固定精度十分制数
* 有理分数
* 集合
* 布尔类型
* 无穷精度的整数
* 数字内置函数和模块

数字常量
````````

基本类型中，Python提供了：整数和浮点数。
还允许我们使用十六进制、八进制和二进制常量来表示整数，提供一个复数类型。

===============================  ======
数字                             常量
===============================  ======
1234,0,99999999                  整数（无穷大小）
1.23,1.,4E210,3.14e-10,4.0e+210  浮点数
0177,0x9ff,0b101010              Python2中的八进制、十六进制、二进制常量
0o177,0x9ff,0b101010             Python3中的八进制、十六进制、二进制常量
3+4j,3.0+4.0j,3J                 复数常量
===============================  ======

整数和浮点数常量
    整数以十进制数字的字符串写法出现。浮点数带一个小数点，也可以加上一个科学计数标记e或者E。
    带有小数点或者e/E的数字会变成一个浮点数对象，启用浮点数运算法则。

Python2中的整数：一般整数和长整数
    Python2中有两种整数类型：一般整数（32位）和长整数（无穷精度），一个以l或者L结尾的整数可以迫使为长整数。
    整数值超过32位的时候会自动转换为长整数，当需要额外精度的时候也会自动转换。

Python3中的整数：只有一种类型
    Python3中，一般整数跟长整数已经合二为一。不在使用l/L表示。

十六进制、八进制、和二进制常量
    十六进制以0x或0X开头，后面接十六进制数字0-9和A-F。字母大小写都可以。

    八进制常量以0o或0O开始。Python2中可以只有一个0，python3不允许。

    二进制常量以0b或0B开头。

    注意这些常量在程序代码中都产生一个整数对象，仅仅是特定值的不同表示。
    内置函数hex(I),oct(I),bin(i)返回响应格式的字符串，并且int(str, base)把字符串转换成为一个整数。

复数
    复数常量写成实部+虚部的写法，虚部以j或J结尾。实部可有可无，可以单独表示虚部。
    内部看，复数是一对浮点数表示的，对复数的所有数字操作都是按照复数的运算法则进行的，也可以通过complex(real, imag)来创建复数。

其他数字类型
    可以通过导入的模块中的函数来创建其他更高级的数字类型。其他的一些拥有它们自己的常量语法（例如set）。

内置数学工具和扩展
```````````````````

表达式操作符
    +、-、*、/、>>、**、&等

内置数学函数
    pow、abs、round、int、hex、bin等

公用模块
    random、math等

数字数多以表达式、内置函数和模块来处理。但是也有许多特性于类型的方法：浮点数的as_integer_ratio方法，is_integer测试整数等。

Python表达式操作符
``````````````````
完整的操作符表达式表

=======================  =====
操作符                   描述
=======================  =====
yield x                  生成器
lambda args:expression   匿名函数
x if y else z            三元选择表达式
x or y                   逻辑或（x为假才会计算y）
x and y                  逻辑与（只有x为真，才会计算y）
not x                    逻辑非
x in y, x not in y       成员关系（可迭代对象、集合）
x is y, x is not y       对象实体测试
x<y, x<=y, x>y, x>=y     大小比较、集合子集和超集值相等性操作符
x==y x!=y 
x|y                      位或，集合并集
x^y                      位异或，集合对称差
x&y                      位与，集合交集
x<<y,x>>y                左移或右移y位
x+y,x-y                  加法，减法，集合合并、差集
x*y,x/y,x%y,x//y         乘法/重复，除法：真除法或floor除法，余数/格式化
-x,+x                    一元减法，识别
~x                       按位求补（取反）
x**y                     幂运算
x[i]                     索引
x[i:j:k]                 分片
x(...)                   调用
x.attr                   属性运算
(...)                    元组，表达式，生成器表达式
[...]                    列表，列表解析
{...}                    字典，集合、集合和字典解析
=======================  =====
